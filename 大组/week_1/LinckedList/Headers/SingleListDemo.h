//#ifndef ListDemo
//#define ListDemo
//
//char singleLinckedListMenu[50][50] = {
//"======[Menu of single linked list]======",
//"[1]-创建空链表.",
//"[2]-遍历数据.",
//"[3]-插入结点.",
//"[4]-查找数据.",
//"[5]-删除结点.",
//"[6]-销毁链表.",
//"[7]-反转链表.",
//"[8]-判断链表是否成环.",
//"[9]-链表奇偶对换",
//"[10]-查找中间结点",
//"[11]-退出.",
//"========================================"
//};
//
//char doublieLickedListMenu[50][50] = {
//"======[Menu of single linked list]======",
//"[1]-创建空链表.",
//"[2]-遍历数据.",
//"[3]-插入结点.",
//"[4]-查找数据.",
//"[5]-删除数据.",
//"[6]-销毁链表.",
//"[7]-反转链表.",
//"[8]-判断链表是否成环.",
//"[9]-链表奇偶对换",
//"[10]-查找中间结点",
//"[11]-退出.",
//"========================================"
//};
//
//char insertMenu[50][50] = {
//"==========[Menu of inserting ways]==========",
//"[1]-头插法.",
//"[2]-尾插法.",
//"[3]-中间插入.",
//"[4]-退出.",
//"============================================"
//};
//
//
//typedef struct LNode* LinckedList;
//typedef struct LNode {
//	int index;
//	char data[50];
//	LinckedList next;
//}LNode;
//
//void displayMenu(int n);//目录显示
//LinckedList createEmptyList();//创建空链表
//
//#endif // !LinckedList

